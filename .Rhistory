setwd('../Desktop/')
?complete.cases
?frame
?data.frame
source('C:/Users/Martin/Desktop/complete.R')
source('C:/Users/Martin/Desktop/complete.R')
source('C:/Users/Martin/Desktop/complete.R')
source('C:/Users/Martin/Desktop/complete.R')
complete("specdata", 1)
source('C:/Users/Martin/Desktop/complete.R')
complete("specdata", 1)
source('C:/Users/Martin/Desktop/complete.R')
complete("specdata", 1)
source('C:/Users/Martin/Desktop/complete.R')
source('C:/Users/Martin/Desktop/complete.R')
complete("specdata", 1)
source('C:/Users/Martin/Desktop/complete.R')
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
length(c(2, 4, 8, 10, 12))
source('C:/Users/Martin/Desktop/complete.R')
length(c(2, 4, 8, 10, 12))
complete("specdata", c(2, 4, 8, 10, 12))
debugSource('C:/Users/Martin/Desktop/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
row
i
id
fr
debugSource('C:/Users/Martin/Desktop/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
fr
debugSource('C:/Users/Martin/Desktop/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
debugSource('C:/Users/Martin/Desktop/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
fr
source('C:/Users/Martin/Desktop/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
source('C:/Users/Martin/Desktop/complete.R')
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
?cor
source('C:/Users/Martin/Desktop/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('C:/Users/Martin/Desktop/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata", 5000)
summary(cr)
cr
source('C:/Users/Martin/Desktop/corr.R')
cr <- corr("specdata", 5000)
summary(cr)
submit()
submit()
submit()
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
iris
iris['Species'=='virginica'][['Sepal.Length']]
iris['Species'=='virginica']
iris[,'Species'=='virginica']
iris['Species'=='virginica',]
iris['Species'==3]
iris['Species']
iris
Species(iris)
levels(iris['Species'])
View(iris)
iris$Species
iris$Species==3
iris$Species=='virginica'
iris[iris$Species=='virginica','Sepal.Length']
mean(iris[iris$Species=='virginica','Sepal.Length'])
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
sapply(split(mtcars$hp, mtcars$cyl), mean)
hps<-sapply(split(mtcars$hp, mtcars$cyl), mean)
hps
hps[4]
hps["4"]
abs(hps["4"]-hps["8"])
set.seed(1)
rpois(5, 2)
?dpois
setwd('C:\Users\Martin\Documents\GitHub\ProgrammingAssignment2')
setwd('C:\\Users\\Martin\\Documents\\GitHub\\ProgrammingAssignment2')
getwd()
?inv
?list
?solve
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
?rnorm
?matrix
system.time(cacheSolve(A))
system.time(A$cacheSolve())
A <- makeCacheMatrix(matrix(rnorm(100), 10, 10));
system.time(A$cacheSolve())
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
system.time(cacheSolve(A))
system.time(cacheSolve(A))
system.time(inv2 <- cacheSolve(A))
print("ERROR!\n");
inv1
A <- makeCacheMatrix(matrix(rnorm(100), 10, 10));
system.time(inv1 <- cacheSolve(A))
system.time(inv2 <- cacheSolve(A))
inv1
inv2
if(!identical(inv1, inv2)) {
;
}
print("ERROR!\n");
?identical
identical(inv1, inv2);
}
if(!identical(inv1, inv2)) print("ERROR!");
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
source("cachematrix.R");
A <- makeCacheMatrix(matrix(rnorm(100), 10, 10));
system.time(inv1 <- cacheSolve(A))
system.time(inv2 <- cacheSolve(A))
if(!identical(inv1, inv2)) print("ERROR!");
if(!identical(inv1, inv2)) print("ERROR!"); else print("OK.");
if(!identical(inv1, inv2)) {
print("ERROR!");
} else {
print("OK.");
}
A
A$x
A$get()
A$set(A$get());
system.time(inv3 <- cacheSolve(A))
if(!identical(inv1, inv3)) {
print("ERROR! inv1 != inv3");
} else {
print("OK.");
}
A$set(matrix(rnorm(100), 10, 10));
system.time(inv4 <- cacheSolve(A))
if(identical(inv1, inv4)) {
print("ERROR! inv1 == inv3");
} else {
print("OK.");
}
source("cachematrix.R");
seed(1);
A <- makeCacheMatrix(matrix(rnorm(100), 10, 10));
system.time(inv1 <- cacheSolve(A))
system.time(inv2 <- cacheSolve(A))
if(!identical(inv1, inv2)) {
print("ERROR! inv1 != inv2");
} else {
print("OK.");
}
A$set(A$get());
system.time(inv3 <- cacheSolve(A))
if(!identical(inv1, inv3)) {
print("ERROR! inv1 != inv3");
} else {
print("OK.");
}
seed(2);
A$set(matrix(rnorm(100), 10, 10));
system.time(inv4 <- cacheSolve(A))
if(identical(inv1, inv4)) {
print("ERROR! inv1 == inv3");
} else {
print("OK.");
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source("cachematrix.R");
seed(1);
A <- makeCacheMatrix(matrix(rnorm(100), 10, 10));
system.time(inv1 <- cacheSolve(A))
system.time(inv2 <- cacheSolve(A))
if(!identical(inv1, inv2)) {
print("ERROR! inv1 != inv2");
} else {
print("OK.");
}
A$set(A$get());
system.time(inv3 <- cacheSolve(A))
if(!identical(inv1, inv3)) {
print("ERROR! inv1 != inv3");
} else {
print("OK.");
}
seed(2);
A$set(matrix(rnorm(100), 10, 10));
system.time(inv4 <- cacheSolve(A))
if(identical(inv1, inv4)) {
print("ERROR! inv1 == inv3");
} else {
print("OK.");
}
set.seed(1);
set.seed(1);
source("cachematrix.R");
set.seed(1);
A <- makeCacheMatrix(matrix(rnorm(100), 10, 10));
system.time(inv1 <- cacheSolve(A))
system.time(inv2 <- cacheSolve(A))
if(!identical(inv1, inv2)) {
print("ERROR! inv1 != inv2");
} else {
print("OK.");
}
A$set(A$get());
system.time(inv3 <- cacheSolve(A))
if(!identical(inv1, inv3)) {
print("ERROR! inv1 != inv3");
} else {
print("OK.");
}
set.seed(2);
A$set(matrix(rnorm(100), 10, 10));
system.time(inv4 <- cacheSolve(A))
if(identical(inv1, inv4)) {
print("ERROR! inv1 == inv3");
} else {
print("OK.");
}
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
source("cachematrix.R");
set.seed(1);
A <- makeCacheMatrix(matrix(rnorm(10000), 100, 100));
system.time(inv1 <- cacheSolve(A))
system.time(inv2 <- cacheSolve(A))
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
A <- makeCacheMatrix(matrix(rnorm(10000), 100, 100));
system.time(inv1 <- cacheSolve(A))
system.time(inv2 <- cacheSolve(A))
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
?system.time
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
A <- makeCacheMatrix(matrix(rnorm(10000), 100, 100));
inv1 <- cacheSolve(A);
inv1
inv1 %*% inv1
inv1'' %*% inv1
t(inv1) %*% inv1
inv1 %*% A$get()
source("cachematrix.R");
set.seed(1);
A <- makeCacheMatrix(matrix(rnorm(10000), 100, 100));
inv1 <- cacheSolve(A);
(inv1 %*% A$get()) - diag(100)
sum((inv1 %*% A$get()) - diag(100))
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
source('~/GitHub/ProgrammingAssignment2/testCacheMatrix.R')
testCacheMatrix()
